name: deploy-website
on:
  release:
      types: [published]
  # push:
  #   branches:
  #     - main
permissions:
  contents: write
  pages: write      # to deploy to Pages
  id-token: write   # to verify the deployment originates from an appropriate source
# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  deploy:
    runs-on: ubuntu-latest
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    container:
      image: ghcr.io/pythonbiellagroup/dockbase/python-base:${{vars.BASE_DOCKER_VERSION}}
      credentials:
          username: ${{ github.actor }}
          password: ${{  secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: install packages
        shell: bash
        run: poetry install
      # - name: set security policy on folder
      #   shell: bash
      #   run: git config --global --add safe.directory '/__w/website/website'
      - name: publish github pages
        shell: bash
        # run: make docs_deploy
        run: make docs_build
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          # Upload entire repository
          path: './site'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      # - name: publish github pages
      #   shell: bash
      #   run: mkdocs gh-deploy --force


      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.x
      # - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV 
      # - uses: actions/cache@v3
      #   with:
      #     key: mkdocs-material-${{ env.cache_id }}
      #     path: .cache
      #     restore-keys: |
      #       mkdocs-material-
      # - run: pip install \ 
      #         mkdocs \
      #         mkdocs-autorefs \
      #         mkdocs-material \
      #         mkdocstrings-python-legacy \
      #         mkdocs-macros-plugin \
      #         mkdocs-simple-plugin \
      #         mkdocstrings \
      #         mkdocs-material-extensions \
      #         pymdown-extensions \
      #         mkdocs-minify-plugin \
      #         mkdocs-redirects \
      #         mkdocs-gallery \
      # - run: mkdocs gh-deploy --force
